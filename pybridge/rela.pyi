from typing import List, Optional, Dict
import torch

TensorDict = Dict[str, torch.Tensor]


class BatchRunner:
    def __init__(self, py_model: torch.jit.RecursiveScriptModule, device: str, max_batch_size: Optional[int],
                 methods: Optional[List[str]]): ...

    def add_method(self, method: str, batch_size: int): ...

    def start(self): ...

    def stop(self): ...

    def update_model(self, py_model: torch.jit.RecursiveScriptModule): ...

    def set_log_freq(self, log_freq: int): ...

    def block_call(self, method: str, t: TensorDict): ...

class ThreadLoop:...

class Context:
    def __init__(self): ...

    def push_thread_loop(self, env:ThreadLoop) -> int: ...

    def start(self): ...

    def pause(self): ...

    def resume(self): ...

    def join(self): ...

    def terminated(self): ...